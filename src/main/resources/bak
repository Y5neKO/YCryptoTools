package com.y5neko.burpext.YCtyptoTools;

import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.net.URLDecoder;
import java.nio.charset.StandardCharsets;
import java.security.*;
import java.security.spec.*;
import java.util.Base64;
import java.util.HashMap;
import java.util.Map;

public class CryptoEngine {
    public static String encrypt(String plaintext, Map<String, String> params) throws Exception {
        String algorithm = params.get("algorithm").toUpperCase();
        switch (algorithm) {
            case "AES":
            case "DES":
                return encryptSymmetric(plaintext, params);
            case "RSA":
                return encryptRSA(plaintext, params.get("publicKey"));
            case "URL":
                return URLEncoder.encode(plaintext, "UTF-8");
            case "MD5":
                return getMD5Hash(plaintext);
            case "SHA-1":
                return getSHA1Hash(plaintext);
            case "BASE64":
                return Base64.getEncoder().encodeToString(plaintext.getBytes(StandardCharsets.UTF_8));
            default:
                throw new IllegalArgumentException("Unsupported algorithm: " + algorithm);
        }
    }

    public static String decrypt(String ciphertext, Map<String, String> params) throws Exception {
        String algorithm = params.get("algorithm").toUpperCase();
        switch (algorithm) {
            case "AES":
            case "DES":
                return decryptSymmetric(ciphertext, params);
            case "RSA":
                return decryptRSA(ciphertext, params.get("privateKey"));
            case "URL":
                return URLDecoder.decode(ciphertext, "UTF-8");
            case "BASE64":
                return Base64.getEncoder().encodeToString(ciphertext.getBytes(StandardCharsets.UTF_8));
            default:
                throw new IllegalArgumentException("Unsupported algorithm: " + algorithm);
        }
    }

    private static String encryptSymmetric(String plaintext, Map<String, String> params) throws Exception {
        Cipher cipher = getSymmetricCipher(params, Cipher.ENCRYPT_MODE);
        byte[] encrypted = cipher.doFinal(plaintext.getBytes(StandardCharsets.UTF_8));
        return Base64.getEncoder().encodeToString(encrypted);
    }

    private static String decryptSymmetric(String ciphertext, Map<String, String> params) throws Exception {
        Cipher cipher = getSymmetricCipher(params, Cipher.DECRYPT_MODE);
        byte[] decoded = Base64.getDecoder().decode(ciphertext);
        byte[] decrypted = cipher.doFinal(decoded);
        return new String(decrypted, StandardCharsets.UTF_8);
    }

    private static Cipher getSymmetricCipher(Map<String, String> params, int mode) throws Exception {
        String algorithm = params.get("algorithm");
        String transformation = algorithm + "/" + params.get("mode") + "/" + params.get("padding");

        Cipher cipher = Cipher.getInstance(transformation);

        // 密钥格式解析
        String keyFormat = params.getOrDefault("keyFormat", "utf8");
        byte[] keyBytes = decodeByFormat(params.get("key"), keyFormat);
        SecretKeySpec keySpec = new SecretKeySpec(keyBytes, algorithm);

        boolean needIV = !"ECB".equalsIgnoreCase(params.get("mode"));
        if (needIV) {
            String ivFormat = params.getOrDefault("ivFormat", "utf8");
            byte[] ivBytes = decodeByFormat(params.get("iv"), ivFormat);
            IvParameterSpec ivSpec = new IvParameterSpec(ivBytes);
            cipher.init(mode, keySpec, ivSpec);
        } else {
            cipher.init(mode, keySpec);
        }

        return cipher;
    }

    private static byte[] decodeByFormat(String input, String format) {
        switch (format.toLowerCase()) {
            case "base64":
                return Base64.getDecoder().decode(input);
            case "hex":
                return hexStringToByteArray(input);
            case "utf8":
            default:
                return input.getBytes(StandardCharsets.UTF_8);
        }
    }

    private static byte[] hexStringToByteArray(String hex) {
        int len = hex.length();
        if (len % 2 != 0) throw new IllegalArgumentException("Invalid hex string.");
        byte[] data = new byte[len / 2];
        for (int i = 0; i < len; i += 2)
            data[i / 2] = (byte) ((Character.digit(hex.charAt(i), 16) << 4)
                    + Character.digit(hex.charAt(i + 1), 16));
        return data;
    }

    private static String encryptRSA(String plaintext, String publicKeyStr) throws Exception {
        PublicKey publicKey = loadPublicKey(publicKeyStr);
        Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
        cipher.init(Cipher.ENCRYPT_MODE, publicKey);
        byte[] encrypted = cipher.doFinal(plaintext.getBytes(StandardCharsets.UTF_8));
        return Base64.getEncoder().encodeToString(encrypted);
    }

    private static String decryptRSA(String ciphertext, String privateKeyStr) throws Exception {
        PrivateKey privateKey = loadPrivateKey(privateKeyStr);
        Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
        cipher.init(Cipher.DECRYPT_MODE, privateKey);
        byte[] decoded = Base64.getDecoder().decode(ciphertext);
        byte[] decrypted = cipher.doFinal(decoded);
        return new String(decrypted, StandardCharsets.UTF_8);
    }

    private static PublicKey loadPublicKey(String base64Key) throws Exception {
        byte[] keyBytes = Base64.getDecoder().decode(base64Key);
        X509EncodedKeySpec keySpec = new X509EncodedKeySpec(keyBytes);
        return KeyFactory.getInstance("RSA").generatePublic(keySpec);
    }

    private static PrivateKey loadPrivateKey(String base64Key) throws Exception {
        byte[] keyBytes = Base64.getDecoder().decode(base64Key);
        PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(keyBytes);
        return KeyFactory.getInstance("RSA").generatePrivate(keySpec);
    }

    private static String getMD5Hash(String input) {
        try {
            // 创建MessageDigest实例，指定MD5算法
            MessageDigest md = MessageDigest.getInstance("MD5");
            // 计算哈希值（字节数组）
            byte[] hashBytes = md.digest(input.getBytes());
            // 将字节数组转换为十六进制字符串
            StringBuilder hexString = new StringBuilder();
            for (byte b : hashBytes) {
                String hex = Integer.toHexString(0xff & b);
                if (hex.length() == 1) {
                    hexString.append('0');
                }
                hexString.append(hex);
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException("MD5算法不存在", e);
        }
    }

    private static String getSHA1Hash(String input) {
        try {
            // 创建MessageDigest实例，指定SHA-1算法
            MessageDigest md = MessageDigest.getInstance("SHA-1");
            byte[] hashBytes = md.digest(input.getBytes());
            StringBuilder hexString = new StringBuilder();
            for (byte b : hashBytes) {
                String hex = Integer.toHexString(0xff & b);
                if (hex.length() == 1) {
                    hexString.append('0');
                }
                hexString.append(hex);
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException("SHA-1算法不存在", e);
        }
    }

    private static String getApiProcResult (String apiUrl, String data, boolean isDecrypt) throws IOException {
        URL obj = new URL(apiUrl);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        // 设置请求方式
        con.setRequestMethod("POST");

        // 启用写入 body
        con.setDoOutput(true);
        try (OutputStream os = con.getOutputStream()) {
            os.write(data.getBytes(StandardCharsets.UTF_8));
        }

        // 读取响应
        int responseCode = con.getResponseCode();
        System.out.println("响应码: " + responseCode);
        try (BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()))) {
            String inputLine;
            StringBuilder response = new StringBuilder();
            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
            }
            return response.toString();
        }
    }

    public static void main(String[] args) throws Exception {
        Map<String, String> params = new HashMap<>();
        params.put("algorithm", "AES");
        params.put("mode", "CBC");
        params.put("padding", "PKCS5Padding");
        params.put("key", Base64.getEncoder().encodeToString("1234567812345678".getBytes()));
        params.put("keyFormat", "base64");
        params.put("iv", "31323334353637383132333435363738"); // 16字节的IV转Hex
        params.put("ivFormat", "hex");

        String encrypted = CryptoEngine.encrypt("hello 中文", params);
        System.out.println("加密后：" + encrypted);
        System.out.println("解密后：" + CryptoEngine.decrypt(encrypted, params));

        System.out.println(getSHA1Hash("asdsadsad"));
    }
}
